//g1 should be gl I thought it was a 1 


<!DOCTYPE HTML>
<HTML lang="en">
	<Head>
	<Title>"Welcome TO WEB_GL Shaders"</TITLE>
		
		<!-- 
		GLSL is the language used for shaders (GL Shader Language)
		Attribute - you specify how to pull the data out of the buffers you supply.
		Buffers - Data loaded onto the GPU (Normally vertex information)
		Uniforms - global variables (in GLSL) that you set before you run the shader program
		Textures - Textures are arrays of data you can randomly acces in your shader program.  
		Varying - are way for a vertex shader to pass data to the fragmentShader.
		-->
		<script id="2dVertexShader" type="notjs">
		attribute vec4 a_position;
		void main()
		{
		
			g1_Position=a_position;
		}		
		</SCRIPT>
		
		<script id="2dFragmentShader" type="notjs">
		//Fragment shaders do not have precision so we have to set it.
		precision mediump float;
		void main()
		{
			g1_FragColor = vec4(0,0,1,1); //between 0 and 1 
		}
		</script>
		<!--frag shader is where the color is assigned  g1 frag color is saying this verticy is this color-->
		<script>
		class InitWebGLProgram
		{
			constructor()
			{
			//setup viewport
			g1.viewport(0,0, g1.canvas.width, g1.CANVAS.height);
			//set clear colors
			g1.clearColor(1,1,1,1); //can change to black to make a spooky game
			g1.clear(g1.COLOR_BUFFER_BIT);
			//values are between 0 and 1 for black and white
			
			}
			createShader(type,source)
			{
				var shader = g1.createShader(type);
				g1.shaderSource(shader,source);
				g1.compileShader(shader);
				var success = g1.getShaderParameter(shader,g1.COMPILE_STATUS);
				if(success){
					return shader;
				}
				//else if didnt work
				console.error(g1.getShaderInfoLog(shader));
				g1.deleteShader(shader);
			}
			
			createProgram(vs,fs)
			{
				var program = g1.createProgram();
				g1.attachShader(program, vs);
				g1.attachShader(program, fs);
				g1.linkProgram(program);
				var success = g1.getProgramParameter(program,g1.LINK_STATUS);
				if(success){
					return program;
				}
				console.error(g1.getProgramInfoLog(program));
				g1.deleteProgram(program);
			}
		}
	
		class Shape
		{
			constructor()
			{
			//becomes the buffer for the shape 
				var positions = {
				0, 0,
				0, 0.5,
				0.7, 0,
				};
				//create a position buffer;
				this.positionBuffer = g1.createBuffer();
				//blind array bufffer
				gl.blindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);
				//load the points
				gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
			}
			render(program)
			{
				//re bind not buffer data. This makes sure the buffer is not modifyed
				gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);
				//have to tell webGL how to interprete data
				var positionAttributeLocation = gl.getAttribLocation(program, "a_position");
				//now we have to specify how to read our vertcies 
				gl.enableVertexAttribArray(positionAttributeLocation);
				//this will repersent a shape. we only want to use buffer data once per shape 
				//three 2d points
				
				
				
				
				var size = 2;
				var type = gl.Float;
				var normalize = false;
				var stride = 0;
				var offset = 0;
				gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset) //great quiz or text question
				
				var primitiveType = gl.TRIANGLES;
				var offset = 0;
				var count = 3;
				gl.drawArrays(primitiveType, offset, count);
				
			}
		}
		
		
		class main
		{
			constructor()
			{
			this.webGL = new InitWebGLProgram();
			var vertexShaderSource = document.getElementById("2dVertexShader").text;
			var fragmentShader = document.getElementById("2dFragmentShader").text;
			var vertexShader = this.webGL.createShader(g1.VERTEX_SHADER, vertexShaderSource);
			var fragmentShader = this.webGL.createShader(g1.FRAGMENT_SHADER, vertexShaderSource);
			//link to program //this.program needs to be a class variable for access
			this.program = this.webGL.createProgram(VERTEX_SHADER, fragmentShaderSource);
			//what program to use 
			g1.useProgram(this.program);
			var temp = new Shape()
			temp.render(this.program);
			}	
		}
		</script>
	</Head>
	<BODY>
		<HEADER>
		
		</HEADER>
		
		<CANVAS id="myCanvas" width="640" height="400">
			Your browser does not support canvas.
		</CANVAS>

		<FOOTER>
		
		</FOOTER>
		<SCRIPT>
			var canvas = document.getElementById("myCanvas");
			var gl = canvas.getContext("webgl");
			
			var m = new main();
		</SCRIPT>		
	</BODY>
</HTML>
		
		
